{"mappings":"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","sources":["src/index.js","src/js/weekly-trend.js","src/js/upcoming-this-month.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","// import axios from 'axios';\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n// const ENDPOINT = \"/trending/movie/week\";\n// const API_KEY = \"b90b64a7e05f9e36894001e36eb3b3c7\";\n// // const IMG_W400 = `/w400`;\n// const IMG_PATH = \"https://image.tmdb.org/t/p/w300\";\n\n// const list = document.querySelector('.js-list');\n// let page = 1;\n// let options = {\n//     root: null,\n//     rootMargin: \"400px\",\n//     threshold: 0,\n// };\n\n// let observer = new IntersectionObserver(handlerPagination, options);\n\n// function handlerPagination(entries, observer) {\n//     // console.log(entries);\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             page += 1;\n//             serviceMovie(page)\n//                 .then(data => {\n//                     list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//                     if (data.total_pages <= data.page) {\n//                         observer.unobserve(guard);\n//                     }\n//                 })\n//         }\n//     })\n// }\n\n//  function getTrending(page = 1) {\n\n//     return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.statusText);\n//             }\n\n//             return resp.json()\n\n//         })\n// }\n// getTrending()\n//     .then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n//     })\n//     .catch(err => console.log(err))\n\n// function createMarkup(arr) {\n//     return arr.slice(0, 3).map(({ original_title, poster_path, release_date,  id, genre_ids}) =>\n//     `<li class='cards-list-item' id=\"${id}\">\n//        <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\"  loading=\"lazy\"\n//        width=\"395px\"\n//        height=\"354px\">\n//        <div class='weekly-trends__overlay'></div>\n//        <div class='cards__bloc-stars'>\n//      <h2 class='cards__list-title'>${original_title}</h2>\n//      <div class='cards__list-text'>${genre_ids} | ${release_date.slice(0, 4)}</div>\n// </div></li>`).join('')\n// }\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst ENDPOINT = '/trending/movie/week';\nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7';\n// const IMG_W400 = /w400;\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w300';\n\nconst list = document.querySelector('.js-list');\nlet page = 1;\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 0,\n};\n\nlet observer = new IntersectionObserver(handlerPagination, options);\n\nfunction handlerPagination(entries, observer) {\n  // console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n      serviceMovie(page).then(data => {\n        list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n        if (data.total_pages <= data.page) {\n          observer.unobserve(guard);\n        }\n      });\n    }\n  });\n}\n\nasync function getTrending(page = 1) {\n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then(\n    resp => {\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n\n      return resp.json();\n    }\n  );\n}\n\nasync function fetchGenres(movie) {\n  const response = await fetch(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=' +\n      API_KEY\n  );\n\n  const data = await response.json();\n\n  let genresArray = [];\n  const genres = data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nasync function createMarkup(arr) {\n  const genresPromises = arr.map(({ genre_ids }) => fetchGenres({ genre_ids }));\n  const genresArrays = await Promise.all(genresPromises);\n  const randomMovie = arr[Math.floor(Math.random() * arr.length)];\n  return arr\n    .slice(0, 3)\n    .map(({ original_title, poster_path, release_date, id }, index) => {\n      const movieGenres = genresArrays[index];\n      return `<li class='cards-list-item' data-id='${id}'> \n          <img class='cards__list-img' src=\"${IMG_PATH}${poster_path}\" alt=\"${original_title}\"> \n          <div class='weekly-trends__overlay'></div> \n          <div class='cards__bloc-stars'> \n            <h2 class='cards__list-title'>${original_title}</h2> \n            <div class='cards__list-text'>${movieGenres.join(\n              ', '\n            )} | ${release_date.slice(0, 4)}</div>  \n          </div> \n        </li>`;\n    })\n    .join('');\n}\n\ngetTrending()\n  .then(async data => {\n    list.insertAdjacentHTML('beforeend', await createMarkup(data.results));\n  })\n  .catch(err => console.log(err));\n\nconst ratingItemsList = document.querySelectorAll('.rating__item');\nconst ratingItemsArray = Array.prototype.slice.call(ratingItemsList);\n\nratingItemsArray.forEach(item =>\n  item.addEventListener(\n    'click',\n    () => (item.parentNode.dataset.totalValue = item.dataset.itemValue)\n  )\n);\n","import axios from 'axios';\nimport { KEY } from './API/api-key';\n\nconst sectionTitle = document.querySelector('.upcoming-section-title');\n\nlet movieData;\nlet addBtn;\n\nasync function fetchUpcomingMovies() {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/movie/upcoming?language=en-US',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  const data = response.data;\n  const randomNumber = Math.floor(Math.random() * data.results.length);\n  const movie = data.results[randomNumber];\n\n  return movie;\n}\n\nfetchUpcomingMovies()\n  .then(movie => {\n    movieData = movie;\n    createMarkup(movie);\n  })\n  .catch(() => {\n    if (!movieData) {\n      return notFoundMarkup();\n    }\n    errorMarkup();\n  });\n\nasync function fetchGenres(movie) {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n\n  let genresArray = [];\n  const genres = response.data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nasync function createMarkup(movie) {\n  const genresResponse = await fetchGenres(movie).then(response => {\n    return response;\n  });\n  const genresList = genresResponse\n    .map((genre, index) => {\n      if (index === 0) {\n        return genre.charAt(0).toUpperCase() + genre.slice(1);\n      } else {\n        return genre.toLowerCase();\n      }\n    })\n    .join(', ');\n\n  const dateParts = movie.release_date.split('-');\n  const dateFormat = `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;\n  const posterUrl = getImageUrl(movie);\n\n  const markup = `<div class=\"upcoming-desktop-container\"><img \n  class=\"upcoming-section-img\" \n  src=\"${posterUrl}\" \n  alt=\"${movie.title}\" \n/> \n<div class=\"upcoming-desktop-flex\"> \n  <h3 class=\"upcoming-movie-title\">${movie.title}</h3> \n  <div class=\"upcoming-flex-container\"> \n    <div class=\"upcoming-tablet-flex\"> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Release date</p> \n        <p class=\"info-value info-value-date\">${dateFormat}</p> \n      </div> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Vote / Votes</p> \n        <p class=\"info-value\"> \n          <span class=\"info-value-vote\"> ${movie.vote_average}</span> / \n          <span class=\"info-value-vote\">${movie.vote_count}</span> \n        </p> \n      </div> \n    </div> \n    <div class=\"upcoming-tablet-flex\"> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Popularity</p> \n        <p class=\"info-value\">${movie.popularity.toFixed(1)}</p> \n      </div> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Genre</p> \n        <p class=\"info-value\">${genresList}</p> \n      </div> \n    </div> \n  </div> \n \n  <h4 class=\"about-title\">About</h4> \n  <p class=\"about-description\">${movie.overview}</p> \n  <button class=\"library-button upcoming-button\">Add to my library</button> \n</div></div> \n        `;\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n  addBtn = document.querySelector('.library-button');\n  addBtn.addEventListener('click', onBtnClick);\n}\n\nfunction getImageUrl(movie) {\n  const baseImageUrl = 'https://image.tmdb.org/t/p/';\n  const deviceWidth = window.innerWidth;\n\n  if (deviceWidth >= 768) {\n    return `${baseImageUrl}w1280/${movie.backdrop_path}`;\n  } else {\n    return `${baseImageUrl}w500/${movie.poster_path}`;\n  }\n}\n\nfunction notFoundMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>There are no upcoming movies at the moment.</p></div> ';\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n}\n\nfunction errorMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>Something went wrong.</p></div>';\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n}\n\nexport function onBtnClick() {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  const movieId = movieData.id;\n\n  if (isMovieStored(movieId)) {\n    const index = storedMovies.findIndex(movie => movie.id === movieId);\n    storedMovies.splice(index, 1);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Add to my library';\n  } else {\n    storedMovies.push(movieData);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Remove from my library';\n  }\n}\n\nexport function isMovieStored(movieId) {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  return storedMovies.some(movie => movie.id === movieId);\n}\n"],"names":["parcelRequire","$1c26d025b3f2124b$var$list","document","querySelector","$1c26d025b3f2124b$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$1c26d025b3f2124b$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","async","arr","genresPromises","map","genre_ids","movie","response","fetch","genresArray","genres","json","genre","includes","id","push","name","$1c26d025b3f2124b$var$fetchGenres","genresArrays","Promise","all","Math","floor","random","length","slice","original_title","poster_path","release_date","index","join","page1","resp","ok","Error","statusText","$1c26d025b3f2124b$var$getTrending","catch","err","console","log","$1c26d025b3f2124b$var$ratingItemsList","querySelectorAll","Array","prototype","call","item","addEventListener","parentNode","dataset","totalValue","itemValue","$2shzp","$85371336fd858ba9$var$sectionTitle","$85371336fd858ba9$var$movieData","$85371336fd858ba9$var$addBtn","$85371336fd858ba9$export$85806c12118d2fc","storedMovies","JSON","parse","localStorage","getItem","movieId","some","$85371336fd858ba9$export$dfa105a8921b3377","findIndex","splice","setItem","stringify","textContent","default","get","params","api_key","$9fyS7","KEY","randomNumber","$85371336fd858ba9$var$fetchUpcomingMovies","genresList","$85371336fd858ba9$var$fetchGenres","charAt","toUpperCase","toLowerCase","dateParts","split","dateFormat","markup","baseImageUrl","window","innerWidth","backdrop_path","$85371336fd858ba9$var$getImageUrl","title","vote_average","vote_count","popularity","toFixed","overview","$85371336fd858ba9$var$createMarkup","$85371336fd858ba9$var$notFoundMarkup","$85371336fd858ba9$var$errorMarkup"],"version":3,"file":"index.111c6a28.js.map"}