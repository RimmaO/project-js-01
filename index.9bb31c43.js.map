{"mappings":"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","sources":["src/index.js","src/js/weekly-trend.js","src/js/upcoming-this-month.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst ENDPOINT = '/trending/movie/week';\nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7';\n// const IMG_W400 = `/w400`;\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w300';\n\nconst list = document.querySelector('.js-list');\nlet page = 1;\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 0,\n};\n\nlet observer = new IntersectionObserver(handlerPagination, options);\n\nfunction handlerPagination(entries, observer) {\n  // console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n      serviceMovie(page).then(data => {\n        list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n        if (data.total_pages <= data.page) {\n          observer.unobserve(guard);\n        }\n      });\n    }\n  });\n}\n\nasync function getTrending(page = 1) {\n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then(\n    resp => {\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n\n      return resp.json();\n    }\n  );\n}\ngetTrending()\n  .then(data => {\n    list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n  })\n  .catch(err => console.log(err));\n\nfunction createMarkup(arr) {\n  return arr\n    .slice(0, 3)\n    .map(\n      ({\n        original_title,\n        poster_path,\n        release_date,\n        genre,\n      }) => `<li class='cards-list-item'>\n       <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w400${poster_path}\" alt=\"${original_title}\">\n       <div class='weekly-trends__overlay'></div>\n       <div class='cards__bloc-stars'>\n     <h2 class='cards__list-title'>${original_title}</h2>\n     <div class='cards__list-text'>${genre} | ${release_date.slice(0, 4)}</div> \n</div></li>`\n    )\n    .join('');\n}\n","import axios from 'axios';\nimport { KEY } from './API/api-key';\n\nconst container = document.querySelector('.container-upcoming-the-month');\nconst addBtn = document.querySelector('.library-button');\nlet movieData;\n\naddBtn.addEventListener('click', onBtnClick);\n\nasync function fetchUpcomingMovies() {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/movie/upcoming?language=en-US',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  const data = response.data;\n  const randomNumber = Math.floor(Math.random() * data.results.length);\n  const movie = data.results[randomNumber];\n\n  return movie;\n}\n\nfetchUpcomingMovies()\n  .then(movie => {\n    movieData = movie;\n    createMarkup(movie);\n  })\n  .catch(() => {\n    if (!movie) {\n      return notFoundMarkup();\n    }\n    errorMarkup();\n  });\n\nasync function fetchGenres(movie) {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n\n  let genresArray = [];\n  const genres = response.data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nasync function createMarkup(movie) {\n  const genresResponse = await fetchGenres(movie).then(response => {\n    return response;\n  });\n  const genresList = genresResponse\n    .map((genre, index) => {\n      if (index === 0) {\n        return genre.charAt(0).toUpperCase() + genre.slice(1);\n      } else {\n        return genre.toLowerCase();\n      }\n    })\n    .join(', ');\n\n  const dateParts = movie.release_date.split('-');\n  const dateFormat = `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;\n  const posterUrl = `https://image.tmdb.org/t/p/w500/${movie.poster_path}`;\n\n  const markup = `<img src=\"${posterUrl}\" alt=\"${movie.title}\" />\n        <h3 class=\"month-movie-title\">${movie.title}</h3>\n        <p class=\"info-key\">\n          Release date <span class=\"info-value\">${dateFormat}</span>\n        </p>\n        <p class=\"info-key\">\n          Vote / Votes <span class=\"info-value\">${\n            movie.vote_average\n          }</span> / <span>${movie.vote_count}</span>\n        </p>\n        <p class=\"info-key\">Popularity <span class=\"info-value\">${movie.popularity.toFixed(\n          1\n        )}</span></p>\n        <p class=\"info-key\">\n          Genre <span class=\"info-value\">${genresList}</span>\n        </p>\n        <h4 class=\"about-title\">About</h4>\n        <p class=\"about-description\">\n          ${movie.overview}\n        </p>\n        `;\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction notFoundMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>There are no upcoming movies at the moment.</p></div> ';\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction errorMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>Something went wrong.</p></div>';\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction onBtnClick() {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  const movieId = movieData.id;\n\n  if (isMovieStored(movieId)) {\n    const index = storedMovies.findIndex(movie => movie.id === movieId);\n    storedMovies.splice(index, 1);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Add to my library';\n  } else {\n    storedMovies.push(movieData);\n    localStorage.setItem('movie-info', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Remove from my library';\n  }\n}\n\nfunction isMovieStored(movieId) {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  return storedMovies.some(movie => movie.id === movieId);\n}\n"],"names":["parcelRequire","$1c26d025b3f2124b$var$list","document","querySelector","$1c26d025b3f2124b$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$1c26d025b3f2124b$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","arr","slice","map","original_title","poster_path","release_date","genre","join","async","page1","fetch","resp","ok","Error","statusText","json","$1c26d025b3f2124b$var$getTrending","catch","err","console","log","$2shzp","$85371336fd858ba9$var$container","$85371336fd858ba9$var$addBtn","$85371336fd858ba9$var$movieData","addEventListener","storedMovies","JSON","parse","localStorage","getItem","movieId","id","some","movie","$85371336fd858ba9$var$isMovieStored","index","findIndex","splice","setItem","stringify","textContent","push","default","get","params","api_key","$9fyS7","KEY","randomNumber","Math","floor","random","length","$85371336fd858ba9$var$fetchUpcomingMovies","genresList","response","genresArray","genres","genre_ids","includes","name","$85371336fd858ba9$var$fetchGenres","charAt","toUpperCase","toLowerCase","dateParts","split","dateFormat","markup","title","vote_average","vote_count","popularity","toFixed","overview","$85371336fd858ba9$var$createMarkup","$85371336fd858ba9$var$notFoundMarkup","$85371336fd858ba9$var$errorMarkup"],"version":3,"file":"index.9bb31c43.js.map"}