{"mappings":"iiBAAAA,EAAA,S,sBCgEA,IAAAC,EAAAD,EAAA,S,aAAME,EAAW,+BACXC,EAAW,uBACXC,EAAU,mCAIVC,EAAOC,SAASC,cAAc,YAChCC,EAAO,EAOI,IAAIC,sBAEnB,SAA2BC,EAASC,GAElCD,EAAQE,SAAQ,SAACC,GACXA,EAAMC,gBAERC,aADAP,GAAQ,GACWQ,MAAK,SAACC,GACvBZ,EAAKa,mBAAmB,YAAaC,EAAaF,EAAKG,UACnDH,EAAKI,aAAeJ,EAAKK,MAC3BX,EAASY,UAAUC,M,SAhBf,CACZC,KAAM,KACNC,WAAY,QACZC,UAAW,I,SAoBEC,I,OAAAA,EAAfC,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,IAA2BC,EAAIC,EAAAC,U,yEAAJF,EAAAC,EAAAE,OAAA,YAAAF,EAAA,GAAQA,EAAA,GAAD,E,kBACzBG,MAAM,GAAcC,OAAXpC,GAA+BoC,OAApBnC,EAAS,aAA2BmC,OAAhBlC,EAAQ,UAAakC,OAALL,IAAQjB,MACrE,SAACuB,GACC,IAAKA,EAAKC,GACR,MAAM,IAAIC,MAAMF,EAAKG,YAGvB,OAAOH,EAAKI,M,gDAPHf,EAAWgB,MAAAC,KAAAV,U,UAYXW,EAAYC,G,OAAZC,EAAWJ,MAAAC,KAAAV,U,UAAXa,I,OAAAA,EAAfnB,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAA2Be,G,IACnBE,EAKAhC,EAEFiC,EACEC,EAEDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAMC,E,kFAVYpB,MACrB,qEACEjC,G,cAFE6C,EAAQS,EAAAC,K,SAKKV,EAASN,O,OAK5B,IALM1B,EAAIyC,EAAAC,KACVC,QAAQC,IAAId,GACRG,EAAc,GACZC,EAASlC,EAAKkC,OAEfC,GAAW,EAAXC,GAAW,EAAXC,OAAWQ,E,UAAXP,EAAeJ,EAAMY,OAAAC,cAArBZ,GAAAI,EAAAD,EAAWU,QAAAC,MAAXd,GAAW,EAALK,EAAND,EAAWW,MACVpB,EAAMqB,UAAUC,SAASZ,EAAMa,KACjCpB,EAAYqB,KAAKd,EAAMe,M,mDAFtBnB,GAAW,EAAXC,EAAWI,EAAAe,G,4BAAXrB,GAAW,MAAXG,EAAWmB,QAAXnB,EAAWmB,S,sBAAXrB,EAAW,C,sBAAXC,E,yFAKEJ,G,8EAhBiBN,MAAAC,KAAAV,U,CAsB1B,I,EAAMhB,G,EAAeU,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAAO2C,G,IACpBC,EACAC,E,yEADAD,EAAiBD,EAAIG,KAAI,SAAAC,G,OAAmBjC,EAAY,CAAEsB,UAArBW,EAATX,W,aACPY,QAAQC,IAAIL,G,cAAjCC,EAAYnB,EAAAC,K,kBAEXgB,EACJO,MAAM,EAAG,GACTJ,KACC,SAAAC,EAAkEI,G,IAA/DC,EAAcL,EAAdK,eAAgBC,EAAWN,EAAXM,YAAaC,EAAYP,EAAZO,aAAchB,EAAES,EAAFT,GAAIiB,EAAYR,EAAZQ,aAC1CC,EAAcX,EAAaM,GACjC,MAAO,wCAC+B7C,OADSgC,EAAG,qDACDhC,OAvExC,mCAuE6DA,OAArB+C,EAAY,WAGzB/C,OAHkC8C,EAAe,qMAIjD9C,OADA8C,EAAe,qDACa9C,OAA5BkD,EAAYC,KAAK,MAAM,OAGlCnD,OAHuCiD,EAAaL,MAAM,EAAG,GAAG,+GAGzC5C,OAAvBoD,EAASJ,GAAc,0C,IAKnDG,KAAK,K,oDAtBkBd,G,iCAyB5B,SAASe,EAASJ,GAMhB,IALA,IAGMK,EAAgBC,KAAKC,MAAMP,GAC7BQ,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAGA,IAEnBD,GADEC,EAAIJ,EAAgB,EANT,IACC,IAYlB,OAAOG,C,oBAzEMlE,EAAWgB,MAAAC,KAAAV,U,EAyH1B6D,GACGhF,KAAI,W,MAACa,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAAOf,G,8EACXZ,E,SAA2Cc,EAAaF,EAAKG,S,mBAA7DsC,EAAAe,GAAKvD,mBAAkB+E,KAAAvC,EAAAe,GAAC,YAAWf,EAAAwC,I,2DADxBjF,G,gCAAR,IAGJkF,OAAM,SAACC,G,OAAQxC,QAAQC,IAAIuC,E,eC5N9BnG,EAAAD,EAAA,S,aAAA,IAKIqG,EACAC,E,0BAHEC,EAAejG,SAASC,cAAc,2B,SAK7BiG,I,OAAAA,EAAf3E,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,I,IACQiB,EAQAhC,EACAwF,EACA1D,E,kFAViB2D,EAAAC,QAAMC,IAC3B,6DACA,CACEC,OAAQ,CACNC,QAASC,EAAAC,O,cAJT/D,EAAQS,EAAAC,KAQR1C,EAAOgC,EAAShC,KAChBwF,EAAeb,KAAKqB,MAAMrB,KAAKsB,SAAWjG,EAAKG,QAAQgB,QACvDW,EAAQ9B,EAAKG,QAAQqF,G,kBAEpB1D,G,4CAbyBH,MAAAC,KAAAV,U,UA4BnBgF,EAAYpE,G,OAAZqE,EAAWxE,MAAAC,KAAAV,U,UAAXiF,I,OAAAA,EAAfvF,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAA2Be,G,IACnBE,EASFC,EACEC,EAEDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAMC,E,kFAZYiD,EAAAC,QAAMC,IAC3B,4DACA,CACEC,OAAQ,CACNC,QAASC,EAAAC,O,OAQf,IAZM/D,EAAQS,EAAAC,KASVT,EAAc,GACZC,EAASF,EAAShC,KAAKkC,OAExBC,GAAW,EAAXC,GAAW,EAAXC,OAAWQ,E,SAAXP,EAAeJ,EAAMY,OAAAC,cAArBZ,GAAAI,EAAAD,EAAWU,QAAAC,MAAXd,GAAW,EAALK,EAAND,EAAWW,MACVpB,EAAMqB,UAAUC,SAASZ,EAAMa,KACjCpB,EAAYqB,KAAKd,EAAMe,M,kDAFtBnB,GAAW,EAAXC,EAAWI,EAAAe,G,4BAAXrB,GAAW,MAAXG,EAAWmB,QAAXnB,EAAWmB,S,sBAAXrB,EAAW,C,sBAAXC,E,yFAKEJ,G,6EAlBiBN,MAAAC,KAAAV,U,UAqBXkF,I,OAAAA,EAAfxF,EAAA5B,EAAA,CAAA4B,EAAAC,GAAAC,MAAA,SAAAC,EAA4Be,G,IACpBuE,EAGAC,EAUAC,EACAC,EACAC,EAEAC,E,kFAjBuBR,EAAYpE,GAAO/B,MAAK,SAAAiC,GACnD,OAAOA,C,WADHqE,EAAc5D,EAAAC,KAGd4D,EAAaD,EAChBxC,KAAI,SAACrB,EAAO0B,GACX,OAAc,IAAVA,EACK1B,EAAMmE,OAAO,GAAGC,cAAgBpE,EAAMyB,MAAM,GAE5CzB,EAAMqE,a,IAGhBrC,KAAK,MAEF+B,EAAYzE,EAAMwC,aAAawC,MAAM,KACrCN,EAAa,GAAmBnF,OAAhBkF,EAAU,GAAG,KAAmBlF,OAAhBkF,EAAU,GAAG,KAAgBlF,OAAbkF,EAAU,IAC1DE,EAAYM,EAAYjF,GAExB4E,EAAS,0FAGRrF,OADAoF,EAAU,eAIkBpF,OAH5BS,EAAMkF,MAAM,sFAQ2B3F,OALXS,EAAMkF,MAAM,qOAUN3F,OALKmF,EAAW,4LAMjBnF,OADCS,EAAMuC,aAAa,wDAQ9BhD,OAPUS,EAAMmF,WAAW,sNAW3B5F,OAJAS,EAAMoF,WAAWC,QAAQ,GAAG,yIAU3B9F,OANDiF,EAAW,2HAMKjF,OAAfS,EAAMsF,SAAS,gHAI9C9B,EAAarF,mBAAmB,WAAYyG,IAC5CrB,EAAShG,SAASC,cAAc,oBACzB+H,iBAAiB,QAASC,G,6CA1DR3F,MAAAC,KAAAV,U,CA6D3B,SAAS6F,EAAYjF,GACnB,IAAMyF,EAAe,8BAGrB,OAFoBC,OAAOC,YAER,IACV,GAAwBpG,OAArBkG,EAAa,UAA4BlG,OAApBS,EAAM4F,eAE9B,GAAuBrG,OAApBkG,EAAa,SAAyBlG,OAAlBS,EAAMsC,Y,CAgBjC,SAASkD,IACd,IAAMK,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,kBAAoB,GACnEC,EAAU5C,EAAU/B,GAE1B,GAcK,SAAuB2E,GAE5B,OADqBJ,KAAKC,MAAMC,aAAaC,QAAQ,kBAAoB,IACrDE,MAAK,SAAAnG,G,OAASA,EAAMuB,KAAO2E,C,IAhB3CE,CAAcF,GAAU,CAC1B,IAAM9D,EAAQyD,EAAaQ,WAAU,SAAArG,G,OAASA,EAAMuB,KAAO2E,C,IAC3DL,EAAaS,OAAOlE,EAAO,GAC3B4D,aAAaO,QAAQ,eAAgBT,KAAKU,UAAUX,IAEpDtC,EAAOkD,YAAc,mB,MAErBZ,EAAarE,KAAK8B,GAClB0C,aAAaO,QAAQ,eAAgBT,KAAKU,UAAUX,IAEpDtC,EAAOkD,YAAc,wB,oBAnJVhD,EAAmB5D,MAAAC,KAAAV,U,EAgBlCsH,GACGzI,MAAK,SAAA+B,GACJsD,EAAYtD,E,SA+BYA,GAAbsE,EAAYzE,MAAAC,KAAAV,U,CA9BvBuH,CAAa3G,E,IAEdoD,OAAM,WACL,IAAKE,EACH,OAmGEsB,EACJ,mIACFpB,EAAarF,mBAAmB,WAAYyG,GAH9C,IACQA,GAKR,WACE,IAAMA,EACJ,uGACFpB,EAAarF,mBAAmB,WAAYyG,E,CAzG1CgC,E","sources":["src/index.js","src/js/weekly-trend.js","src/js/upcoming-this-month.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","// import axios from 'axios';\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n// const ENDPOINT = \"/trending/movie/week\";\n// const API_KEY = \"b90b64a7e05f9e36894001e36eb3b3c7\";\n// // const IMG_W400 = `/w400`;\n// const IMG_PATH = \"https://image.tmdb.org/t/p/w300\";\n\n// const list = document.querySelector('.js-list');\n// let page = 1;\n// let options = {\n//     root: null,\n//     rootMargin: \"400px\",\n//     threshold: 0,\n// };\n\n// let observer = new IntersectionObserver(handlerPagination, options);\n\n// function handlerPagination(entries, observer) {\n//     // console.log(entries);\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             page += 1;\n//             serviceMovie(page)\n//                 .then(data => {\n//                     list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//                     if (data.total_pages <= data.page) {\n//                         observer.unobserve(guard);\n//                     }\n//                 })\n//         }\n//     })\n// }\n\n//  function getTrending(page = 1) {\n\n//     return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.statusText);\n//             }\n\n//             return resp.json()\n\n//         })\n// }\n// getTrending()\n//     .then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n//     })\n//     .catch(err => console.log(err))\n\n// function createMarkup(arr) {\n//     return arr.slice(0, 3).map(({ original_title, poster_path, release_date,  id, genre_ids}) =>\n//     `<li class='cards-list-item' id=\"${id}\">\n//        <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\"  loading=\"lazy\"\n//        width=\"395px\"\n//        height=\"354px\">\n//        <div class='weekly-trends__overlay'></div>\n//        <div class='cards__bloc-stars'>\n//      <h2 class='cards__list-title'>${original_title}</h2>\n//      <div class='cards__list-text'>${genre_ids} | ${release_date.slice(0, 4)}</div>\n// </div></li>`).join('')\n// }\n\nconst BASE_URL = 'https://api.themoviedb.org/3'; \nconst ENDPOINT = '/trending/movie/week'; \nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7'; \n// const IMG_W400 = /w400; \nconst IMG_PATH = 'https://image.tmdb.org/t/p/w300'; \n \nconst list = document.querySelector('.js-list'); \nlet page = 1; \nlet options = { \n  root: null, \n  rootMargin: '400px', \n  threshold: 0, \n}; \n \nlet observer = new IntersectionObserver(handlerPagination, options); \n \nfunction handlerPagination(entries, observer) { \n  // console.log(entries); \n  entries.forEach((entry) => { \n    if (entry.isIntersecting) { \n      page += 1; \n      serviceMovie(page).then((data) => { \n        list.insertAdjacentHTML('beforeend', createMarkup(data.results)); \n        if (data.total_pages <= data.page) { \n          observer.unobserve(guard); \n        } \n      }); \n    } \n  }); \n} \n\nasync function getTrending(page = 1) { \n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then( \n    (resp) => { \n      if (!resp.ok) { \n        throw new Error(resp.statusText); \n      } \n \n      return resp.json(); \n    } \n  ); \n} \n \nasync function fetchGenres(movie) { \n  const response = await fetch( \n    'https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=' + \n      API_KEY \n  ); \n \n  const data = await response.json(); \n  console.log(movie);\n  let genresArray = []; \n  const genres = data.genres; \n \n  for (const genre of genres) { \n    if (movie.genre_ids.includes(genre.id)) { \n      genresArray.push(genre.name); \n    } \n  } \n  return genresArray; \n} \n//  --------------------------------------------------------------------------------------------------\n\n\n\nconst createMarkup = async (arr) => {\n  const genresPromises = arr.map(({ genre_ids }) => fetchGenres({ genre_ids }));\n  const genresArrays = await Promise.all(genresPromises);\n\n  return arr\n    .slice(0, 3)\n    .map(\n      ({ original_title, poster_path, vote_average, id, release_date }, index) => {\n        const movieGenres = genresArrays[index];\n        return `<li class='cards-list-item' data-id='${id}'>\n          <img class='cards__list-img' src=\"${IMG_PATH}${poster_path}\" alt=\"${original_title}\" loading=\"lazy\" width=\"395px\" height=\"354px\">\n          <div class='weekly-trends__overlay'></div>\n          <div class='cards__bloc-stars'>\n            <h2 class='cards__list-title'>${original_title}</h2>\n            <div class='cards__list-text'>${movieGenres.join(', ')} | ${release_date.slice(0, 4)}</div>\n          </div>\n          <div class=\"movie-rating hero-rating\">\n            <div class=\"stars\">${getStars(vote_average)}</div>\n          </div>\n        </li>`;\n      }\n    )\n    .join('');\n};\n\nfunction getStars(vote_average) {\n  const fullStar = '★';\n  const emptyStar = '☆';\n\n  const roundedRating = Math.round(vote_average);\n  let stars = '';\n  for (let i = 0; i < 5; i++) {\n    if (i < roundedRating / 2) {\n      stars += fullStar;\n    } else {\n      stars += emptyStar;\n    }\n  }\n\n  return stars;\n}\n\nasync function displayMovieRating(rating) {\n  const roundedRating = Math.round(rating);\n  const starsElement = document.querySelector('.stars');\n  const ratingValueElement = document.querySelector('.rating-value');\n\n  let stars = '';\n  for (let i = 0; i < 5; i++) {\n    if (i < roundedRating / 2) {\n      stars += '★';\n    } else {\n      stars += '☆';\n    }\n  }\n\n  starsElement.textContent = stars;\n  ratingValueElement.textContent = `Rating: ${rating.toFixed(1)}`;\n}\n\n// ------------------------------------------------------------------------------------\n// async function createMarkup(arr) { \n//   const genresPromises = arr.map(({ genre_ids }) => fetchGenres({ genre_ids })); \n//   const genresArrays = await Promise.all(genresPromises); \n\n//   return arr \n//     .slice(0, 3) \n//     .map(({ original_title, poster_path,vote_average, id, release_date }, index) => { \n//       const movieGenres = genresArrays[index]; \n//       return `<li class='cards-list-item' data-id='${id}'> \n//           <img class='cards__list-img' src=\"${IMG_PATH}${poster_path}\" alt=\"${original_title}\" loading=\"lazy\" \n//           width=\"395px\" \n//           height=\"574px\"> \n//           <div class='weekly-trends__overlay'></div> \n//          <div class='cards__bloc-stars'> \n//             <h2 class='cards__list-title'>${original_title}</h2> \n//             <div class='cards__list-text'>${movieGenres.join( \n//               ', ' \n//             )} | ${release_date.slice(0, 4)}</div>  \n//           </div> \n//           <div class=\"rating-value\"></div\n//         </li>`; \n//     }) \n//     .join(''); \n\n// } \n \ngetTrending() \n  .then(async (data) => { \n    list.insertAdjacentHTML('beforeend', await createMarkup(data.results)); \n  }) \n  .catch((err) => console.log(err));\n\n// -------------------------------------\n\n","import axios from 'axios';\nimport { KEY } from './API/api-key';\n\nconst sectionTitle = document.querySelector('.upcoming-section-title');\n\nlet movieData;\nlet addBtn;\n\nasync function fetchUpcomingMovies() {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/movie/upcoming?language=en-US',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  const data = response.data;\n  const randomNumber = Math.floor(Math.random() * data.results.length);\n  const movie = data.results[randomNumber];\n\n  return movie;\n}\n\nfetchUpcomingMovies()\n  .then(movie => {\n    movieData = movie;\n    createMarkup(movie);\n  })\n  .catch(() => {\n    if (!movieData) {\n      return notFoundMarkup();\n    }\n    errorMarkup();\n  });\n\nasync function fetchGenres(movie) {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n\n  let genresArray = [];\n  const genres = response.data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nasync function createMarkup(movie) {\n  const genresResponse = await fetchGenres(movie).then(response => {\n    return response;\n  });\n  const genresList = genresResponse\n    .map((genre, index) => {\n      if (index === 0) {\n        return genre.charAt(0).toUpperCase() + genre.slice(1);\n      } else {\n        return genre.toLowerCase();\n      }\n    })\n    .join(', ');\n\n  const dateParts = movie.release_date.split('-');\n  const dateFormat = `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;\n  const posterUrl = getImageUrl(movie);\n\n  const markup = `<div class=\"upcoming-desktop-container\"><img \n  class=\"upcoming-section-img\" \n  src=\"${posterUrl}\" \n  alt=\"${movie.title}\" \n/> \n<div class=\"upcoming-desktop-flex\"> \n  <h3 class=\"upcoming-movie-title\">${movie.title}</h3> \n  <div class=\"upcoming-flex-container\"> \n    <div class=\"upcoming-tablet-flex\"> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Release date</p> \n        <p class=\"info-value info-value-date\">${dateFormat}</p> \n      </div> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Vote / Votes</p> \n        <p class=\"info-value\"> \n          <span class=\"info-value-vote\"> ${movie.vote_average}</span> / \n          <span class=\"info-value-vote\">${movie.vote_count}</span> \n        </p> \n      </div> \n    </div> \n    <div class=\"upcoming-tablet-flex\"> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Popularity</p> \n        <p class=\"info-value\">${movie.popularity.toFixed(1)}</p> \n      </div> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Genre</p> \n        <p class=\"info-value\">${genresList}</p> \n      </div> \n    </div> \n  </div> \n \n  <h4 class=\"about-title\">About</h4> \n  <p class=\"about-description\">${movie.overview}</p> \n  <button class=\"library-button upcoming-button\">Add to my library</button> \n</div></div> \n        `;\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n  addBtn = document.querySelector('.library-button');\n  addBtn.addEventListener('click', onBtnClick);\n}\n\nfunction getImageUrl(movie) {\n  const baseImageUrl = 'https://image.tmdb.org/t/p/';\n  const deviceWidth = window.innerWidth;\n\n  if (deviceWidth >= 768) {\n    return `${baseImageUrl}w1280/${movie.backdrop_path}`;\n  } else {\n    return `${baseImageUrl}w500/${movie.poster_path}`;\n  }\n}\n\nfunction notFoundMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>There are no upcoming movies at the moment.</p></div> ';\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n}\n\nfunction errorMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>Something went wrong.</p></div>';\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n}\n\nexport function onBtnClick() {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  const movieId = movieData.id;\n\n  if (isMovieStored(movieId)) {\n    const index = storedMovies.findIndex(movie => movie.id === movieId);\n    storedMovies.splice(index, 1);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Add to my library';\n  } else {\n    storedMovies.push(movieData);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Remove from my library';\n  }\n}\n\nexport function isMovieStored(movieId) {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  return storedMovies.some(movie => movie.id === movieId);\n}\n"],"names":["parcelRequire","$bpxeT","$21ec04dc48ab3d3d$var$BASE_URL","$21ec04dc48ab3d3d$var$ENDPOINT","$21ec04dc48ab3d3d$var$API_KEY","$21ec04dc48ab3d3d$var$list","document","querySelector","$21ec04dc48ab3d3d$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$21ec04dc48ab3d3d$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","$21ec04dc48ab3d3d$var$_getTrending","$parcel$interopDefault","$2TvXO","mark","_callee","page1","_args","arguments","length","fetch","concat","resp","ok","Error","statusText","json","apply","this","$21ec04dc48ab3d3d$var$fetchGenres","movie","$21ec04dc48ab3d3d$var$_fetchGenres","response","genresArray","genres","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","genre","_ctx","sent","console","log","undefined","Symbol","iterator","next","done","value","genre_ids","includes","id","push","name","t0","return","arr","genresPromises","genresArrays","map","param","Promise","all","slice","index","original_title","poster_path","vote_average","release_date","movieGenres","join","$21ec04dc48ab3d3d$var$getStars","roundedRating","Math","round","stars","i","$21ec04dc48ab3d3d$var$getTrending","call","t1","catch","err","$ae7e4fc690ed52aa$var$movieData","$ae7e4fc690ed52aa$var$addBtn","$ae7e4fc690ed52aa$var$sectionTitle","$ae7e4fc690ed52aa$var$_fetchUpcomingMovies","randomNumber","$dIxxU","default","get","params","api_key","$1xRtb","KEY","floor","random","$ae7e4fc690ed52aa$var$fetchGenres","$ae7e4fc690ed52aa$var$_fetchGenres","$ae7e4fc690ed52aa$var$_createMarkup","genresResponse","genresList","dateParts","dateFormat","posterUrl","markup","charAt","toUpperCase","toLowerCase","split","$ae7e4fc690ed52aa$var$getImageUrl","title","vote_count","popularity","toFixed","overview","addEventListener","$ae7e4fc690ed52aa$export$85806c12118d2fc","baseImageUrl","window","innerWidth","backdrop_path","storedMovies","JSON","parse","localStorage","getItem","movieId","some","$ae7e4fc690ed52aa$export$dfa105a8921b3377","findIndex","splice","setItem","stringify","textContent","$ae7e4fc690ed52aa$var$fetchUpcomingMovies","$ae7e4fc690ed52aa$var$createMarkup","$ae7e4fc690ed52aa$var$errorMarkup"],"version":3,"file":"index.569144f6.js.map"}