{"mappings":"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","sources":["src/index.js","src/js/weekly-trend.js","src/js/upcoming-this-month.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","// import axios from 'axios';\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n// const ENDPOINT = \"/trending/movie/week\";\n// const API_KEY = \"b90b64a7e05f9e36894001e36eb3b3c7\";\n// // const IMG_W400 = `/w400`;\n// const IMG_PATH = \"https://image.tmdb.org/t/p/w300\";\n\n// const list = document.querySelector('.js-list');\n// let page = 1;\n// let options = {\n//     root: null,\n//     rootMargin: \"400px\",\n//     threshold: 0,\n// };\n\n// let observer = new IntersectionObserver(handlerPagination, options);\n\n// function handlerPagination(entries, observer) {\n//     // console.log(entries);\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             page += 1;\n//             serviceMovie(page)\n//                 .then(data => {\n//                     list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//                     if (data.total_pages <= data.page) {\n//                         observer.unobserve(guard);\n//                     }\n//                 })\n//         }\n//     })\n// }\n\n//  function getTrending(page = 1) {\n\n//     return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.statusText);\n//             }\n\n//             return resp.json()\n\n//         })\n// }\n// getTrending()\n//     .then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n//     })\n//     .catch(err => console.log(err))\n\n// function createMarkup(arr) {\n//     return arr.slice(0, 3).map(({ original_title, poster_path, release_date,  id, genre_ids}) =>\n//     `<li class='cards-list-item' id=\"${id}\">\n//        <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\"  loading=\"lazy\"\n//        width=\"395px\"\n//        height=\"354px\">\n//        <div class='weekly-trends__overlay'></div>\n//        <div class='cards__bloc-stars'>\n//      <h2 class='cards__list-title'>${original_title}</h2>\n//      <div class='cards__list-text'>${genre_ids} | ${release_date.slice(0, 4)}</div>\n// </div></li>`).join('')\n// }\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst ENDPOINT = '/trending/movie/week';\nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7';\n// const IMG_W400 = /w400;\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w400';\n\nconst list = document.querySelector('.js-list');\nlet page = 1;\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 0,\n};\n\nlet observer = new IntersectionObserver(handlerPagination, options);\n\nfunction handlerPagination(entries, observer) {\n  // console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n      serviceMovie(page).then(data => {\n        list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n        if (data.total_pages <= data.page) {\n          observer.unobserve(guard);\n        }\n      });\n    }\n  });\n}\n\nasync function getTrending(page = 1) {\n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then(\n    resp => {\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n\n      return resp.json();\n    }\n  );\n}\n\nasync function fetchGenres(movie) {\n  const response = await fetch(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=' +\n      API_KEY\n  );\n\n  const data = await response.json();\n\n  let genresArray = [];\n  const genres = data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nfunction displayMovieInfo(movie) {\n  const movieRating = movie.vote_average;\n  displayMovieRating(movieRating);\n}\n\nfunction displayMovieRating(rating) {\n  const roundedRating = Math.round(rating);\n\n  const starsElement = document.querySelector('.stars');\n  const ratingValueElement = document.querySelector('.rating-value');\n\n  let stars = '';\n  for (let i = 0; i < 5; i++) {\n    if (i < roundedRating / 2) {\n      stars += '★';\n    } else {\n      stars += '☆';\n    }\n  }\n\n  starsElement.textContent = stars;\n  ratingValueElement.textContent = `Rating: ${rating.toFixed(1)}`;\n}\n\nasync function createMarkup(arr) {\n  const genresPromises = arr.map(({ genre_ids }) => fetchGenres({ genre_ids }));\n  const genresArrays = await Promise.all(genresPromises);\n\n  return arr\n    .slice(0, 3)\n    .map(({ original_title, poster_path, release_date }, index) => {\n      const movieGenres = genresArrays[index];\n      return `<li class='cards-list-item'> \n          <img class='cards__list-img' src=\"${IMG_PATH}${poster_path}\" alt=\"${original_title}\"> \n          <div class='weekly-trends__overlay'></div> \n          <div class='cards__bloc-stars'> \n            <h2 class='cards__list-title'>${original_title}</h2> \n            <div class='cards__list-text'>${movieGenres.join(\n              ', '\n            )} | ${release_date.slice(0, 4)}</div>  \n              \n          </div> \n        </li>`;\n    })\n    .join('');\n}\n\ngetTrending()\n  .then(async data => {\n    list.insertAdjacentHTML('beforeend', await createMarkup(data.results));\n  })\n  .catch(err => console.log(err));\n\nfunction createMarkup(arr) {\n  return arr\n    .slice(0, 3)\n    .map(\n      ({\n        original_title,\n        poster_path,\n        release_date,\n        genre,\n      }) => `<li class='cards-list-item'>\n       <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w400${poster_path}\" alt=\"${original_title}\">\n       <div class='weekly-trends__overlay'></div>\n       <div class='cards__bloc-stars'>\n     <h2 class='cards__list-title'>${original_title}</h2>\n     <div class='cards__list-text'>${genre} | ${release_date.slice(0, 4)}</div> \n</div></li>`\n    )\n    .join('');\n}\n","import axios from 'axios';\nimport { KEY } from './API/api-key';\n\nconst container = document.querySelector('.container-upcoming-the-month');\nconst addBtn = document.querySelector('.library-button');\nlet movieData;\n\naddBtn.addEventListener('click', onBtnClick);\n\nasync function fetchUpcomingMovies() {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/movie/upcoming?language=en-US',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  const data = response.data;\n  const randomNumber = Math.floor(Math.random() * data.results.length);\n  const movie = data.results[randomNumber];\n\n  return movie;\n}\n\nfetchUpcomingMovies()\n  .then(movie => {\n    movieData = movie;\n    createMarkup(movie);\n  })\n  .catch(() => {\n    if (!movie) {\n      return notFoundMarkup();\n    }\n    errorMarkup();\n  });\n\nasync function fetchGenres(movie) {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n\n  let genresArray = [];\n  const genres = response.data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nasync function createMarkup(movie) {\n  const genresResponse = await fetchGenres(movie).then(response => {\n    return response;\n  });\n  const genresList = genresResponse\n    .map((genre, index) => {\n      if (index === 0) {\n        return genre.charAt(0).toUpperCase() + genre.slice(1);\n      } else {\n        return genre.toLowerCase();\n      }\n    })\n    .join(', ');\n\n  const dateParts = movie.release_date.split('-');\n  const dateFormat = `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;\n  const posterUrl = `https://image.tmdb.org/t/p/w500/${movie.poster_path}`;\n\n  const markup = `<img src=\"${posterUrl}\" alt=\"${movie.title}\" />\n        <h3 class=\"month-movie-title\">${movie.title}</h3>\n        <p class=\"info-key\">\n          Release date <span class=\"info-value\">${dateFormat}</span>\n        </p>\n        <p class=\"info-key\">\n          Vote / Votes <span class=\"info-value\">${\n            movie.vote_average\n          }</span> / <span>${movie.vote_count}</span>\n        </p>\n        <p class=\"info-key\">Popularity <span class=\"info-value\">${movie.popularity.toFixed(\n          1\n        )}</span></p>\n        <p class=\"info-key\">\n          Genre <span class=\"info-value\">${genresList}</span>\n        </p>\n        <h4 class=\"about-title\">About</h4>\n        <p class=\"about-description\">\n          ${movie.overview}\n        </p>\n        `;\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction notFoundMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>There are no upcoming movies at the moment.</p></div> ';\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction errorMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>Something went wrong.</p></div>';\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction onBtnClick() {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  const movieId = movieData.id;\n\n  if (isMovieStored(movieId)) {\n    const index = storedMovies.findIndex(movie => movie.id === movieId);\n    storedMovies.splice(index, 1);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Add to my library';\n  } else {\n    storedMovies.push(movieData);\n    localStorage.setItem('movie-info', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Remove from my library';\n  }\n}\n\nfunction isMovieStored(movieId) {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  return storedMovies.some(movie => movie.id === movieId);\n}\n"],"names":["parcelRequire","$1c26d025b3f2124b$var$list","document","querySelector","$1c26d025b3f2124b$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$1c26d025b3f2124b$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","async","arr","genresPromises","map","genre_ids","movie","response","fetch","genresArray","genres","json","genre","includes","id","push","name","$1c26d025b3f2124b$var$fetchGenres","genresArrays","Promise","all","slice","original_title","poster_path","release_date","index","join","page1","resp","ok","Error","statusText","$1c26d025b3f2124b$var$getTrending","catch","err","console","log","$2shzp","$85371336fd858ba9$var$container","$85371336fd858ba9$var$addBtn","$85371336fd858ba9$var$movieData","addEventListener","storedMovies","JSON","parse","localStorage","getItem","movieId","some","$85371336fd858ba9$var$isMovieStored","findIndex","splice","setItem","stringify","textContent","default","get","params","api_key","$9fyS7","KEY","randomNumber","Math","floor","random","length","$85371336fd858ba9$var$fetchUpcomingMovies","genresList","$85371336fd858ba9$var$fetchGenres","charAt","toUpperCase","toLowerCase","dateParts","split","dateFormat","markup","title","vote_average","vote_count","popularity","toFixed","overview","$85371336fd858ba9$var$createMarkup","$85371336fd858ba9$var$notFoundMarkup","$85371336fd858ba9$var$errorMarkup"],"version":3,"file":"index.2fa27912.js.map"}