{"mappings":"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","sources":["src/index.js","src/js/weekly-trend.js","src/js/upcoming-this-month.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst ENDPOINT = '/trending/movie/week';\nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7';\n// const IMG_W400 = `/w400`;\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w300';\n\nconst list = document.querySelector('.js-list');\nlet page = 1;\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 0,\n};\n\nlet observer = new IntersectionObserver(handlerPagination, options);\n\nfunction handlerPagination(entries, observer) {\n  // console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n      serviceMovie(page).then(data => {\n        list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n        if (data.total_pages <= data.page) {\n          observer.unobserve(guard);\n        }\n      });\n    }\n  });\n}\n\nasync function getTrending(page = 1) {\n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then(\n    resp => {\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n\n      return resp.json();\n    }\n  );\n}\ngetTrending()\n  .then(data => {\n    list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n  })\n  .catch(err => console.log(err));\n\nfunction createMarkup(arr) {\n  return arr\n    .slice(0, 3)\n    .map(\n      ({\n        original_title,\n        poster_path,\n        release_date,\n        genre,\n      }) => `<li class='cards-list-item'>\n       <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w400${poster_path}\" alt=\"${original_title}\">\n       <div class='weekly-trends__overlay'></div>\n       <div class='cards__bloc-stars'>\n     <h2 class='cards__list-title'>${original_title}</h2>\n     <div class='cards__list-text'>${genre} | ${release_date.slice(0, 4)}</div> \n</div></li>`\n    )\n    .join('');\n}\n","import axios from 'axios';\nimport { KEY } from './API/api-key';\n\nconst container = document.querySelector('.container');\nconst addBtn = document.querySelector('.library-button');\nlet movieData;\n\naddBtn.addEventListener('click', onBtnClick);\n\nasync function fetchUpcomingMovies() {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/movie/upcoming?language=en-US',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  const data = response.data;\n  const randomNumber = Math.floor(Math.random() * data.results.length);\n  const movie = data.results[randomNumber];\n\n  return movie;\n}\n\nfetchUpcomingMovies()\n  .then(movie => {\n    movieData = movie;\n    createMarkup(movie);\n  })\n  .catch(() => {\n    if (!movie) {\n      return notFoundMarkup();\n    }\n    errorMarkup();\n  });\n\nasync function fetchGenres(movie) {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n\n  let genresArray = [];\n  const genres = response.data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nasync function createMarkup(movie) {\n  const genresResponse = await fetchGenres(movie).then(response => {\n    return response;\n  });\n  const genresList = genresResponse\n    .map((genre, index) => {\n      if (index === 0) {\n        return genre.charAt(0).toUpperCase() + genre.slice(1);\n      } else {\n        return genre.toLowerCase();\n      }\n    })\n    .join(', ');\n\n  const dateParts = movie.release_date.split('-');\n  const dateFormat = `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;\n  const posterUrl = `https://image.tmdb.org/t/p/w500/${movie.poster_path}`;\n\n  const markup = `<img src=\"${posterUrl}\" alt=\"${movie.title}\" />\n        <h3 class=\"month-movie-title\">${movie.title}</h3>\n        <p class=\"info-key\">\n          Release date <span class=\"info-value\">${dateFormat}</span>\n        </p>\n        <p class=\"info-key\">\n          Vote / Votes <span class=\"info-value\">${\n            movie.vote_average\n          }</span> / <span>${movie.vote_count}</span>\n        </p>\n        <p class=\"info-key\">Popularity <span class=\"info-value\">${movie.popularity.toFixed(\n          1\n        )}</span></p>\n        <p class=\"info-key\">\n          Genre <span class=\"info-value\">${genresList}</span>\n        </p>\n        <h4 class=\"about-title\">About</h4>\n        <p class=\"about-description\">\n          ${movie.overview}\n        </p>\n        `;\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction notFoundMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>There are no upcoming movies at the moment.</p></div> ';\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction errorMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>Something went wrong.</p></div>';\n  container.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction onBtnClick() {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  const movieId = movieData.id;\n\n  if (isMovieStored(movieId)) {\n    const index = storedMovies.findIndex(movie => movie.id === movieId);\n    storedMovies.splice(index, 1);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Add to my library';\n  } else {\n    storedMovies.push(movieData);\n    localStorage.setItem('movie-info', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Remove from my library';\n  }\n}\n\nfunction isMovieStored(movieId) {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  return storedMovies.some(movie => movie.id === movieId);\n}\n"],"names":["parcelRequire","$bpxeT","$21ec04dc48ab3d3d$var$BASE_URL","$21ec04dc48ab3d3d$var$ENDPOINT","$21ec04dc48ab3d3d$var$API_KEY","$21ec04dc48ab3d3d$var$list","document","querySelector","$21ec04dc48ab3d3d$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$21ec04dc48ab3d3d$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","$21ec04dc48ab3d3d$var$_getTrending","$parcel$interopDefault","$2TvXO","mark","_callee","page1","_args","arguments","length","fetch","concat","resp","ok","Error","statusText","json","apply","this","arr","slice","map","param","original_title","poster_path","release_date","genre","join","$21ec04dc48ab3d3d$var$getTrending","catch","err","console","log","$ae7e4fc690ed52aa$var$movieData","$ae7e4fc690ed52aa$var$container","$ae7e4fc690ed52aa$var$addBtn","$ae7e4fc690ed52aa$var$_fetchUpcomingMovies","response","randomNumber","movie","$dIxxU","default","get","params","api_key","$1xRtb","KEY","_ctx","sent","Math","floor","random","$ae7e4fc690ed52aa$var$fetchGenres","$ae7e4fc690ed52aa$var$_fetchGenres","genresArray","genres","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","undefined","Symbol","iterator","next","done","value","genre_ids","includes","id","push","name","t0","return","$ae7e4fc690ed52aa$var$_createMarkup","genresResponse","genresList","dateParts","dateFormat","posterUrl","markup","index","charAt","toUpperCase","toLowerCase","split","title","vote_average","vote_count","popularity","toFixed","overview","addEventListener","storedMovies","JSON","parse","localStorage","getItem","movieId","some","$ae7e4fc690ed52aa$var$isMovieStored","findIndex","splice","setItem","stringify","textContent","$ae7e4fc690ed52aa$var$fetchUpcomingMovies","$ae7e4fc690ed52aa$var$createMarkup","$ae7e4fc690ed52aa$var$errorMarkup"],"version":3,"file":"index.21d30131.js.map"}