{"mappings":"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","sources":["src/index.js","src/js/weekly-trend.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","// import axios from 'axios';\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n// const ENDPOINT = \"/trending/movie/week\";\n// const API_KEY = \"b90b64a7e05f9e36894001e36eb3b3c7\";\n// // const IMG_W400 = `/w400`;\n// const IMG_PATH = \"https://image.tmdb.org/t/p/w300\";\n\n// const list = document.querySelector('.js-list');\n// let page = 1;\n// let options = {\n//     root: null,\n//     rootMargin: \"400px\",\n//     threshold: 0,\n// };\n\n// let observer = new IntersectionObserver(handlerPagination, options);\n\n// function handlerPagination(entries, observer) {\n//     // console.log(entries);\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             page += 1;\n//             serviceMovie(page)\n//                 .then(data => {\n//                     list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//                     if (data.total_pages <= data.page) {\n//                         observer.unobserve(guard);\n//                     }\n//                 })\n//         }\n//     })\n// }\n\n//  function getTrending(page = 1) {\n\n//     return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.statusText);\n//             }\n\n//             return resp.json()\n\n//         })\n// }\n// getTrending()\n//     .then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n//     })\n//     .catch(err => console.log(err))\n\n// function createMarkup(arr) {\n//     return arr.slice(0, 3).map(({ original_title, poster_path, release_date,  id, genre_ids}) =>\n//     `<li class='cards-list-item' id=\"${id}\">\n//        <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\"  loading=\"lazy\"\n//        width=\"395px\"\n//        height=\"354px\">\n//        <div class='weekly-trends__overlay'></div>\n//        <div class='cards__bloc-stars'>\n//      <h2 class='cards__list-title'>${original_title}</h2>\n//      <div class='cards__list-text'>${genre_ids} | ${release_date.slice(0, 4)}</div>\n// </div></li>`).join('')\n// }\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst ENDPOINT = '/trending/movie/week';\nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7';\n// const IMG_W400 = /w400;\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w400';\n\nconst list = document.querySelector('.js-list');\nlet page = 1;\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 0,\n};\n\nlet observer = new IntersectionObserver(handlerPagination, options);\n\nfunction handlerPagination(entries, observer) {\n  // console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n      serviceMovie(page).then(data => {\n        list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n        if (data.total_pages <= data.page) {\n          observer.unobserve(guard);\n        }\n      });\n    }\n  });\n}\n\nasync function getTrending(page = 1) {\n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then(\n    resp => {\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n\n      return resp.json();\n    }\n  );\n}\n\nasync function fetchGenres(movie) {\n  const response = await fetch(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=' +\n      API_KEY\n  );\n\n  const data = await response.json();\n\n  let genresArray = [];\n  const genres = data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nfunction displayMovieInfo(movie) {\n  const movieRating = movie.vote_average;\n  displayMovieRating(movieRating);\n}\n\nfunction displayMovieRating(rating) {\n  const roundedRating = Math.round(rating);\n\n  const starsElement = document.querySelector('.stars');\n  const ratingValueElement = document.querySelector('.rating-value');\n\n  let stars = '';\n  for (let i = 0; i < 5; i++) {\n    if (i < roundedRating / 2) {\n      stars += '★';\n    } else {\n      stars += '☆';\n    }\n  }\n\n  starsElement.textContent = stars;\n  ratingValueElement.textContent = `Rating: ${rating.toFixed(1)}`;\n}\n\nasync function createMarkup(arr) {\n  const genresPromises = arr.map(({ genre_ids }) => fetchGenres({ genre_ids }));\n  const genresArrays = await Promise.all(genresPromises);\n\n  return arr\n    .slice(0, 3)\n    .map(({ original_title, poster_path, release_date }, index) => {\n      const movieGenres = genresArrays[index];\n      return `<li class='cards-list-item'> \n          <img class='cards__list-img' src=\"${IMG_PATH}${poster_path}\" alt=\"${original_title}\"> \n          <div class='weekly-trends__overlay'></div> \n          <div class='cards__bloc-stars'> \n            <h2 class='cards__list-title'>${original_title}</h2> \n            <div class='cards__list-text'>${movieGenres.join(\n              ', '\n            )} | ${release_date.slice(0, 4)}</div>  \n              \n          </div> \n        </li>`;\n    })\n    .join('');\n}\n\ngetTrending()\n  .then(async data => {\n    list.insertAdjacentHTML('beforeend', await createMarkup(data.results));\n  })\n  .catch(err => console.log(err));\n"],"names":["parcelRequire","$bpxeT","$21ec04dc48ab3d3d$var$BASE_URL","$21ec04dc48ab3d3d$var$ENDPOINT","$21ec04dc48ab3d3d$var$API_KEY","$21ec04dc48ab3d3d$var$IMG_PATH","$21ec04dc48ab3d3d$var$list","document","querySelector","$21ec04dc48ab3d3d$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$21ec04dc48ab3d3d$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","$21ec04dc48ab3d3d$var$_getTrending","$parcel$interopDefault","$2TvXO","mark","_callee","page1","_args","arguments","length","fetch","concat","resp","ok","Error","statusText","json","apply","this","$21ec04dc48ab3d3d$var$fetchGenres","movie","$21ec04dc48ab3d3d$var$_fetchGenres","response","genresArray","genres","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","genre","_ctx","sent","undefined","Symbol","iterator","next","done","value","genre_ids","includes","id","push","name","t0","return","arr","$21ec04dc48ab3d3d$var$_createMarkup","genresPromises","genresArrays","map","param","Promise","all","slice","index","original_title","poster_path","release_date","movieGenres","join","$21ec04dc48ab3d3d$var$getTrending","call","t1","catch","err","console","log"],"version":3,"file":"index.cbafeecb.js.map"}