{"mappings":"gfAAAA,EAAA,S,iCCAAA,EAAA,S,sBDQA,IAQMC,EAAO,CACXC,UAAWC,SAASC,eAAe,cACnCC,YAAaF,SAASG,cAAc,iBACpCC,eAAgBJ,SAASC,eAAe,aAG1CI,OAAOC,iBAAiB,oBAGxB,WACE,IAAMC,EAAeC,EAbU,gBAgB/B,GAAID,GAcN,SAAsBA,GAEpBE,QAAQC,IAAIH,GA6HQI,EA5HLJ,EAAaK,QAC1B,SAACD,EAAQE,G,OAASF,GASpBG,GADsBC,EARsBF,GAS5CC,YACAE,EAFsBD,EAEtBC,MACAC,EAHsBF,EAGtBE,aACAC,EAJsBH,EAItBG,GACAC,EALsBJ,EAKtBI,aACAC,EANsBL,EAMtBK,UAEO,wCAIIC,OAHwBH,EAAG,gEAI3BG,OADAC,EAASR,GAAa,kBAOCO,OANvBL,EAAM,+JAOiBK,OADAL,EAAM,6CACoBK,OAA1BD,EAAUG,KAAK,MAAM,OACrBF,OAD0BG,EAAUL,GAAc,4CAC3BE,OAc3D,SAAkBJ,GAChB,IAAMQ,EAAa,omBAUbC,EAAY,onBAUZC,EAAY,o/BAedC,EAAc,GAIlB,OAFeC,KAAKC,MAAMb,IAGxB,KAAK,EACHW,EAAc,GAAuBP,OAApBI,EAAUM,OAAO,IAClC,MACF,KAAK,EACHH,EAAc,GAAcP,OAAXM,GAA+BN,OAApBI,EAAUM,OAAO,IAC7C,MACF,KAAK,EACHH,EAAc,GAAcP,OAAXK,GAA+BL,OAApBI,EAAUM,OAAO,IAC7C,MACF,KAAK,EACHH,EAAc,GAAcP,OAAXK,GAAsBL,OAAXM,GAA+BN,OAApBI,EAAUM,OAAO,IACxD,MACF,KAAK,EACHH,EAAc,GAAwBP,OAArBK,EAASK,OAAO,IAAyBV,OAApBI,EAAUM,OAAO,IACvD,MACF,KAAK,EACHH,EAAc,GAAwBP,OAArBK,EAASK,OAAO,IAAgBV,OAAXM,GAA+BN,OAApBI,EAAUM,OAAO,IAClE,MACF,KAAK,EACHH,EAAc,GAAwBP,OAArBK,EAASK,OAAO,IAAyBV,OAApBI,EAAUM,OAAO,IACvD,MACF,KAAK,EACHH,EAAc,GAAwBP,OAArBK,EAASK,OAAO,IAAgBV,OAAXM,GAAqBN,OAAVI,GACjD,MACF,KAAK,EACHG,EAAc,GAAwBP,OAArBK,EAASK,OAAO,IAAeV,OAAVI,GACtC,MACF,KAAK,EACHG,EAAc,GAAwBP,OAArBK,EAASK,OAAO,IAAcV,OAATM,GACtC,MACF,KAAK,GACHC,EAAc,GAAsBP,OAAnBK,EAASK,OAAO,IACjC,MACF,QACE,MAAM,IAAIC,MAAM,kBAEpB,OAAOJ,C,CA3F2BK,CAAShB,GAAc,kBArB3D,IAAwBF,EACtBD,EACAE,EACAC,EACAC,EACAC,EACAC,C,GAbE,IA2HFX,QAAQC,IAAIC,GACZb,EAAKC,UAAUmC,mBAAmB,YAAavB,GAFjD,IAAsBA,C,CA5IlBwB,CAAa5B,OAEV,CAELT,EAAKC,UAAUqC,UADI,sH,KAgDrB,IAAMd,EAAW,SAAAe,G,MACf,GAIChB,OAHEgB,EAEG,kCAAsChB,OAAJgB,GADjC,gF,EAIHb,EAAY,SAAAc,G,MAAS,GAA+CjB,OAA3CiB,EAAoB,GAAqBjB,OAAlBiB,EAAMC,MAAM,EAAG,IAA9B,U,EAmGvC,IAAM/B,EAAO,SAAAgC,GACX,IACE,IAAMC,EAAkBC,aAAaC,QAAQH,GAC7C,OAA2B,OAApBC,OAA2BG,EAAYC,KAAKC,MAAML,E,CACzD,MAAOM,GACPtC,QAAQsC,MAAM,oBAAqBA,EAAMC,Q","sources":["src/library.js","src/render.js"],"sourcesContent":["import './js/modal';\nimport './js/header';\nimport './js/switch-color-bkg';\nimport './js/footer';\n\nimport { createListMarkup } from './render';\nimport { getMovieById2 } from './js/API/api';\n\nconst librariesKey = 'b90b64a7e05f9e36894001e36eb3b3c7';\nlet page = 1;\nlet perPage = 9;\n\n\nconst KEY_LOCAL_STOREG_LIBRARY = \"librariesKey\";\n// let localLibrary ='';\n\nconst refs = {\n  listFilms: document.getElementById('list-films'),\n  libraryList: document.querySelector('.library-list'),\n  loadMoreButton: document.getElementById('loadMore'),\n};\n\nwindow.addEventListener('DOMContentLoaded', createLibraryLocal)\n\n\nfunction createLibraryLocal() {\n  const localLibrary = load(KEY_LOCAL_STOREG_LIBRARY);\n  \n  \n  if (localLibrary) {\n    createMarkup(localLibrary);\n  }\n  else {\n     const opsText = '<li class=\"oppsText\"><p>OOPS...</p> <p>We are very sorry!</p> <p> You don’t have any movies at your library.</p><li>'\n  refs.listFilms.innerHTML = opsText;\n  }\n\n\n}\n\n\n\n\nfunction createMarkup(localLibrary) {\n  localLibrary\n  console.log(localLibrary);\n  const markup = localLibrary.reduce(\n    (markup, film) => markup + createFilmItem(film),\n    ''\n  );\n  \n  updateMarkup(markup);\n  \n}\n\nfunction createFilmItem({\n  poster_path,\n  title,\n  vote_average,\n  id,\n  release_date,\n  genre_ids,\n}) {\n  return `\n  <li class=\"movies-card\" data-id=\"${id}\">\n      <img\n      class=\"movies-card-photo\"\n      src=\"${checkImg(poster_path)}\"\n      alt=\"${title}\"\n      loading=\"lazy\"\n      width=\"395px\"\n      height=\"574px\"\n    />\n    <div class=\"movies-card-overlay\"></div>\n    <h2 class=\"movies-card-title\">${title}</h2>\n    <p class=\"movies-card-genres\">${genre_ids.join(', ')} | ${dataCheck(release_date)}</p>\n    <p class=\"movies-card-rating\">${getStars(vote_average)}</p>\n  </li>`;\n}\n\n\nconst checkImg = url =>\n  `${\n    !url\n      ? `https://dummyimage.com/400x600/cfcfcf/ffffff&text=OOPS...+NO+POSTER+AVAILABLE`\n      : `https://image.tmdb.org/t/p/w500${url}`\n  }`;\n\nconst dataCheck = value => `${!value ? 'Unknown' : `${value.slice(0, 4)}`}`;\n\nfunction getStars(vote_average) {\n  const emptyStar = `<svg class=\"star\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M16.875 7.3125H10.8281L9 1.6875L7.17188 7.3125H1.125L6.04688 10.6875L4.14844 16.3125L9 12.7969L13.8516 16.3125L11.9531 10.6875L16.875 7.3125Z\" stroke=\"url(#paint0_linear_405_766)\" stroke-linejoin=\"round\"/>\n    <defs>\n    <linearGradient id=\"paint0_linear_405_766\" x1=\"3.375\" y1=\"2.625\" x2=\"13.5\" y2=\"16.5\" gradientUnits=\"userSpaceOnUse\">\n    <stop stop-color=\"#F84119\"/>\n    <stop offset=\"1\" stop-color=\"#F89F19\" stop-opacity=\"0.68\"/>\n    </linearGradient>\n    </defs>\n    </svg>`;\n\n  const fullStar = `<svg class=\"star\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"rgba(248, 65, 25, 1)\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M16.875 7.3125H10.8281L9 1.6875L7.17188 7.3125H1.125L6.04688 10.6875L4.14844 16.3125L9 12.7969L13.8516 16.3125L11.9531 10.6875L16.875 7.3125Z\" stroke=\"url(#paint0_linear_405_766)\" stroke-linejoin=\"round\"/>\n    <defs>\n    <linearGradient id=\"paint0_linear_405_766\" x1=\"3.375\" y1=\"2.625\" x2=\"13.5\" y2=\"16.5\" gradientUnits=\"userSpaceOnUse\">\n    <stop stop-color=\"#F84119\"/>\n    <stop offset=\"1\" stop-color=\"#F89F19\" stop-opacity=\"0.68\"/>\n    </linearGradient>\n    </defs>\n    </svg>`;\n\n  const halfStar = `<svg class=\"star\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M16.875 7.3125H10.8281L9 1.6875L7.17188 7.3125H1.125L6.04688 10.6875L4.14844 16.3125L9 12.7969L13.8516 16.3125L11.9531 10.6875L16.875 7.3125Z\" stroke=\"url(#paint0_linear_148_6991)\" stroke-linejoin=\"round\"/>\n    <path d=\"M9 1.6875V12.7969L4.14844 16.3125L6.04688 10.6875L1.125 7.3125H7.17188L9 1.6875Z\" fill=\"url(#paint1_linear_148_6991)\"/>\n    <defs>\n    <linearGradient id=\"paint0_linear_148_6991\" x1=\"3.04877\" y1=\"2.73251\" x2=\"13.478\" y2=\"16.7124\" gradientUnits=\"userSpaceOnUse\">\n    <stop stop-color=\"#F84119\"/>\n    <stop offset=\"1\" stop-color=\"#F89F19\" stop-opacity=\"0.68\"/>\n    </linearGradient>\n    <linearGradient id=\"paint1_linear_148_6991\" x1=\"2.08688\" y1=\"2.73251\" x2=\"12.1506\" y2=\"9.47748\" gradientUnits=\"userSpaceOnUse\">\n    <stop stop-color=\"#F84119\"/>\n    <stop offset=\"1\" stop-color=\"#F89F19\" stop-opacity=\"0.68\"/>\n    </linearGradient>\n    </defs>\n    </svg>`;\n\n  let ratingStars = '';\n\n  const rating = Math.round(vote_average);\n\n  switch (rating) {\n    case 0:\n      ratingStars = `${emptyStar.repeat(5)}`;\n      break;\n    case 1:\n      ratingStars = `${halfStar}${emptyStar.repeat(4)}`;\n      break;\n    case 2:\n      ratingStars = `${fullStar}${emptyStar.repeat(4)}`;\n      break;\n    case 3:\n      ratingStars = `${fullStar}${halfStar}${emptyStar.repeat(3)}`;\n      break;\n    case 4:\n      ratingStars = `${fullStar.repeat(2)}${emptyStar.repeat(3)}`;\n      break;\n    case 5:\n      ratingStars = `${fullStar.repeat(2)}${halfStar}${emptyStar.repeat(2)}`;\n      break;\n    case 6:\n      ratingStars = `${fullStar.repeat(3)}${emptyStar.repeat(2)}`;\n      break;\n    case 7:\n      ratingStars = `${fullStar.repeat(3)}${halfStar}${emptyStar}`;\n      break;\n    case 8:\n      ratingStars = `${fullStar.repeat(4)}${emptyStar}`;\n      break;\n    case 9:\n      ratingStars = `${fullStar.repeat(4)}${halfStar}`;\n      break;\n    case 10:\n      ratingStars = `${fullStar.repeat(5)}`;\n      break;\n    default:\n      throw new Error('Invalid rating');\n  }\n  return ratingStars;\n}\n\nfunction updateMarkup(markup) {\n  console.log(markup)\n  refs.listFilms.insertAdjacentHTML('beforeend', markup);\n    \n}\n\n\n\n// const save = (key, value) => {\n//   try {\n//     const serializedState = JSON.stringify(value);\n//     localStorage.setItem(key, serializedState);\n//   } catch (error) {\n//     console.error('Set state error: ', error.message);\n//   }\n// };\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// if (refs.libraryList) renderLibraryData();\n// if (refs.loadMoreButton) {\n//   refs.loadMoreButton.addEventListener('click', () => {\n//     page += 1;\n//     renderLibraryData();\n//   });\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // localStorage\n// function addMovieToLibrary(movieId) {\n//   getMovieById2(movieId).then(movie => {\n//     movie.genre_names = movie.genres\n//       .map(genre => {\n//         return genre.name;\n//       })\n//       .slice(0, 2)\n//       .join(',');\n//     if (movie.release_date) {\n//       movie.release_date = movie.release_date.slice(0, 4);\n//     }\n//     let libraries = JSON.parse(localStorage.getItem(librariesKey)) || {};\n//     libraries[movie.id] = movie;\n//     localStorage.setItem(librariesKey, JSON.stringify(libraries));\n//   });\n// }\n\n// function removeMovieFromLibrary(movieId) {\n//   let libraries = JSON.parse(localStorage.getItem(librariesKey)) || {};\n//   // delete libraries[movieId];\n//   localStorage.setItem(librariesKey, JSON.stringify(libraries));\n//   if (refs.libraryList) renderLibraryData();\n// }\n\n// function getMovieFromLibrary(movieId) {\n//   const libraries = JSON.parse(localStorage.getItem(librariesKey)) || {};\n//   return libraries[movieId];\n// }\n\n// function getMoviesFromLibrary() {\n//   const libraries = JSON.parse(localStorage.getItem(librariesKey)) || {};\n//   return Object.values(libraries);\n// }\n\n// function renderLibraryData() {\n//   let movieMarkup = renderMovies();\n//   if (!movieMarkup) {\n//     movieMarkup = `\n//     <div class=\" container\">\n//       <p class=\"library-empty__mistake\">OOPS... <br> We are very sorry! <br> You don't have any movies at your library.</p>\n// <a class=\"btn-library__link\" onclick=\"window.location.href='catalog.html'\">Search movie</a>\n//     </div>\n//       `;\n//   } else {\n//     movieMarkup = `<ul class=\"cards__list films\">${movieMarkup}</ul>`;\n//   }\n//   refs.libraryList.innerHTML = movieMarkup;\n// }\n\n// function renderMovies() {\n//   const allMovies = getMoviesFromLibrary();\n\n//   if (!Object.keys(allMovies)) {\n//     return null;\n//   }\n\n//   let movies = allMovies.slice(0, page * perPage);\n\n//   const markup = createListMarkup(movies);\n\n//   refs.loadMoreButton.style = 'display: none;';\n//   if (allMovies.length > page * perPage) {\n//     refs.loadMoreButton.style = '';\n//   }\n//   return markup;\n// }\n\n// // spiner?\n// window.onload = function () {\n//   document.body.classList.add('loaded_hiding');\n//   window.setTimeout(function () {\n//     document.body.classList.add('loaded');\n//     document.body.classList.remove('loaded_hiding');\n//   }, 500);\n// };\n","export async function getMovieGenres() {\n  const { data } = await axios.get(\n    `${BASE_URL}/genre/movie/list?api_key=${API_KEY}`\n  );\n  return data;\n}\n\nexport async function getGenres() {\n  const genres = await getMovieGenres().then(({ genres }) => genres);\n\n  return { genres };\n}\n\nexport function renderMarkup(data) {\n  getGenres().then(({ genres }) => {\n    //Добавление списка жанров в localStorage\n    saveLs('genresList', genres);\n    if (data.results) {\n      data.results.forEach(film => {\n        const { genre_ids, release_date } = film;\n        genres.forEach(({ name, id }) => {\n          if (genre_ids.includes(id)) {\n            if (genre_ids.length > 2) {\n              genre_ids.splice(2, genre_ids.length - 1);\n            }\n            genre_ids.splice(genre_ids.indexOf(id), 1, name);\n          }\n          film.genre_names = genre_ids.join(', ');\n          if (film.release_date) {\n            film.release_date = release_date.slice(0, 4);\n          }\n        });\n      });\n    }\n    const markupList = createListMarkup(data.results);\n    if (cards) {\n      cards.innerHTML = markupList;\n    }\n  });\n}\n\nexport function createListMarkup(data) {\n  if (data) {\n    return data\n      .map(\n        ({\n          original_title,\n          poster_path,\n          vote_average,\n          id,\n          genre_names,\n          release_date,\n        }) => {\n          let posterPath = ``;\n          if (poster_path) {\n            posterPath = `${IMG_BASE_URL}${IMG_W400}${poster_path}`;\n          } else {\n            posterPath = 'https://i.ibb.co/C0LFwTh/OIF.jpg';\n          }\n\n          let starIcons = '';\n          for (let i = 1; i <= 5; i++) {\n            let starClass = 'fa-star-o';\n            if (i * 2 < vote_average) {\n              starClass = 'fa-star';\n            } else if (i * 2 - 1 < vote_average) {\n              starClass = 'fa-star-half-o';\n            }\n            starIcons += `<span class=\"fa star ${starClass}\"> </span>`;\n          }\n\n          return `<li class='cards-list__item hover-cursor' data-id='${id}'>\n              <img\n                class='cards-list__img'\n                src='${posterPath}'\n                alt='${original_title}'\n                width\n                loading='lazy'\n                data-id='${id}'\n              />\n              <div class='cards-list__wrap'>\n                <div class='cards-list__info'>\n                  <h2 class='cards-list__title'>${original_title}</h2>\n                  <div class='cards-list_second_line'>\n                    <div class='cards-list__text'>\n                      <p>${genre_names} | ${release_date}</p>\n                  </div>\n                </div>\n                </div>\n                <div class='star-rate'>\n                  ${starIcons}\n                </div>     \n              </div>\n              </li>\n              `;\n        }\n      )\n      .join('');\n  }\n}\n"],"names":["parcelRequire","$cecbdd76f2d3d4bd$var$refs","listFilms","document","getElementById","libraryList","querySelector","loadMoreButton","window","addEventListener","localLibrary","$cecbdd76f2d3d4bd$var$load","console","log","markup","reduce","film","poster_path","param","title","vote_average","id","release_date","genre_ids","concat","$cecbdd76f2d3d4bd$var$checkImg","join","$cecbdd76f2d3d4bd$var$dataCheck","emptyStar","fullStar","halfStar","ratingStars","Math","round","repeat","Error","$cecbdd76f2d3d4bd$var$getStars","insertAdjacentHTML","$cecbdd76f2d3d4bd$var$createMarkup","innerHTML","url","value","slice","key","serializedState","localStorage","getItem","undefined","JSON","parse","error","message"],"version":3,"file":"library.500a18ad.js.map"}