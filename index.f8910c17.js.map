{"mappings":"oeAAAA,EAAA,S,sBCgEA,MAMMC,EAAOC,SAASC,cAAc,YACpC,IAAIC,EAAO,EAOI,IAAIC,sBAEnB,SAA2BC,EAASC,GAElCD,EAAQE,SAASC,IACXA,EAAMC,iBACRN,GAAQ,EACRO,aAAaP,GAAMQ,MAAMC,IACvBZ,EAAKa,mBAAmB,YAAaC,EAAaF,EAAKG,UACnDH,EAAKI,aAAeJ,EAAKK,MAC3BX,EAASY,UAAUC,MAAM,I,MAhBrB,CACZC,KAAM,KACNC,WAAY,QACZC,UAAW,IAmDbC,eAAeT,EAAaU,GAC1B,MAAMC,EAAiBD,EAAIE,KAAI,EAACC,UAAEA,KApBpCJ,eAA2BK,GACzB,MAAMC,QAAiBC,MACrB,sGAMF,IAAIC,EAAc,GAClB,MAAMC,SAHaH,EAASI,QAGRD,OAEpB,IAAK,MAAME,KAASF,EACdJ,EAAMD,UAAUQ,SAASD,EAAME,KACjCL,EAAYM,KAAKH,EAAMI,MAG3B,OAAOP,C,CAI2CQ,CAAY,C,UAAEZ,MAC1Da,QAAqBC,QAAQC,IAAIjB,GACnBD,EAAImB,KAAKC,MAAMD,KAAKE,SAAWrB,EAAIsB,SACvD,OAAOtB,EACJuB,MAAM,EAAG,GACTrB,KAAI,EAACsB,eAAEA,EAAcC,YAAEA,EAAWC,aAAEA,GAAgBC,IAE5C,6GAC4CF,WAAqBD,sJAGlCA,sDALlBR,EAAaW,GAMiBC,KAC1C,WACKF,EAAaH,MAAM,EAAG,iDAIpCK,KAAK,G,EAlDV7B,eAA2B8B,EAAO,GAChC,OAAOvB,MAAM,kGAAkDuB,KAAQ1C,MACpE2C,IACC,IAAKA,EAAKC,GACR,MAAM,IAAIC,MAAMF,EAAKG,YAGvB,OAAOH,EAAKrB,MAAM,G,EA8CxByB,GACG/C,MAAKY,MAAOX,IACXZ,EAAKa,mBAAmB,kBAAmBC,EAAaF,EAAKG,SAAS,IAEvE4C,OAAOC,GAAQC,QAAQC,IAAIF,KAI7B,MAAMG,EAAmB9D,SAAS+D,iBAAiB,iBAC1BC,MAAMC,UAAUnB,MAAMoB,KAAKJ,GAEnCxD,SAAQ6D,GACxBA,EAAKC,iBAAiB,SAAS,IAC/BD,EAAKE,WAAWC,QAAQC,WAAaJ,EAAKG,QAAQE,c","sources":["src/index.js","src/js/weekly-trend.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","// import axios from 'axios';\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n// const ENDPOINT = \"/trending/movie/week\";\n// const API_KEY = \"b90b64a7e05f9e36894001e36eb3b3c7\";\n// // const IMG_W400 = `/w400`;\n// const IMG_PATH = \"https://image.tmdb.org/t/p/w300\";\n\n// const list = document.querySelector('.js-list');\n// let page = 1;\n// let options = {\n//     root: null,\n//     rootMargin: \"400px\",\n//     threshold: 0,\n// };\n\n// let observer = new IntersectionObserver(handlerPagination, options);\n\n// function handlerPagination(entries, observer) {\n//     // console.log(entries);\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             page += 1;\n//             serviceMovie(page)\n//                 .then(data => {\n//                     list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//                     if (data.total_pages <= data.page) {\n//                         observer.unobserve(guard);\n//                     }\n//                 })\n//         }\n//     })\n// }\n\n//  function getTrending(page = 1) {\n\n//     return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.statusText);\n//             }\n\n//             return resp.json()\n\n//         })\n// }\n// getTrending()\n//     .then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n//     })\n//     .catch(err => console.log(err))\n\n// function createMarkup(arr) {\n//     return arr.slice(0, 3).map(({ original_title, poster_path, release_date,  id, genre_ids}) =>\n//     `<li class='cards-list-item' id=\"${id}\">\n//        <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\"  loading=\"lazy\"\n//        width=\"395px\"\n//        height=\"354px\">\n//        <div class='weekly-trends__overlay'></div>\n//        <div class='cards__bloc-stars'>\n//      <h2 class='cards__list-title'>${original_title}</h2>\n//      <div class='cards__list-text'>${genre_ids} | ${release_date.slice(0, 4)}</div>\n// </div></li>`).join('')\n// }\n\nconst BASE_URL = 'https://api.themoviedb.org/3'; \nconst ENDPOINT = '/trending/movie/week'; \nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7'; \n// const IMG_W400 = /w400; \nconst IMG_PATH = 'https://image.tmdb.org/t/p/w300'; \n \nconst list = document.querySelector('.js-list'); \nlet page = 1; \nlet options = { \n  root: null, \n  rootMargin: '400px', \n  threshold: 0, \n}; \n \nlet observer = new IntersectionObserver(handlerPagination, options); \n \nfunction handlerPagination(entries, observer) { \n  // console.log(entries); \n  entries.forEach((entry) => { \n    if (entry.isIntersecting) { \n      page += 1; \n      serviceMovie(page).then((data) => { \n        list.insertAdjacentHTML('beforeend', createMarkup(data.results)); \n        if (data.total_pages <= data.page) { \n          observer.unobserve(guard); \n        } \n      }); \n    } \n  }); \n} \n \nasync function getTrending(page = 1) { \n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then( \n    (resp) => { \n      if (!resp.ok) { \n        throw new Error(resp.statusText); \n      } \n \n      return resp.json(); \n    } \n  ); \n} \n \nasync function fetchGenres(movie) { \n  const response = await fetch( \n    'https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=' + \n      API_KEY \n  ); \n \n  const data = await response.json(); \n \n  let genresArray = []; \n  const genres = data.genres; \n \n  for (const genre of genres) { \n    if (movie.genre_ids.includes(genre.id)) { \n      genresArray.push(genre.name); \n    } \n  } \n  return genresArray; \n} \n \nasync function createMarkup(arr) { \n  const genresPromises = arr.map(({ genre_ids }) => fetchGenres({ genre_ids })); \n  const genresArrays = await Promise.all(genresPromises); \n  const randomMovie = arr[Math.floor(Math.random() * arr.length)]; \n  return arr \n    .slice(0, 3) \n    .map(({ original_title, poster_path, release_date }, index) => { \n      const movieGenres = genresArrays[index]; \n      return `<li class='cards-list-item'> \n          <img class='cards__list-img' src=\"${IMG_PATH}${poster_path}\" alt=\"${original_title}\"> \n          <div class='weekly-trends__overlay'></div> \n          <div class='cards__bloc-stars'> \n            <h2 class='cards__list-title'>${original_title}</h2> \n            <div class='cards__list-text'>${movieGenres.join( \n              ', ' \n            )} | ${release_date.slice(0, 4)}</div>  \n          </div> \n        </li>`; \n    }) \n    .join(''); \n} \n \ngetTrending() \n  .then(async (data) => { \n    list.insertAdjacentHTML('beforeend', await createMarkup(data.results)); \n  }) \n  .catch((err) => console.log(err));\n\n\n \n const ratingItemsList =  document.querySelectorAll('.rating__item');\n const ratingItemsArray = Array.prototype.slice.call(ratingItemsList);\n \n ratingItemsArray.forEach(item =>\n  item.addEventListener('click', () =>\n  item.parentNode.dataset.totalValue = item.dataset.itemValue\n  ));"],"names":["parcelRequire","$1c26d025b3f2124b$var$list","document","querySelector","$1c26d025b3f2124b$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$1c26d025b3f2124b$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","async","arr","genresPromises","map","genre_ids","movie","response","fetch","genresArray","genres","json","genre","includes","id","push","name","$1c26d025b3f2124b$var$fetchGenres","genresArrays","Promise","all","Math","floor","random","length","slice","original_title","poster_path","release_date","index","join","page1","resp","ok","Error","statusText","$1c26d025b3f2124b$var$getTrending","catch","err","console","log","$1c26d025b3f2124b$var$ratingItemsList","querySelectorAll","Array","prototype","call","item","addEventListener","parentNode","dataset","totalValue","itemValue"],"version":3,"file":"index.f8910c17.js.map"}