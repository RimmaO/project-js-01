{"mappings":"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","sources":["src/index.js","src/js/weekly-trend.js","src/js/upcoming-this-month.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","// import axios from 'axios';\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n// const ENDPOINT = \"/trending/movie/week\";\n// const API_KEY = \"b90b64a7e05f9e36894001e36eb3b3c7\";\n// // const IMG_W400 = `/w400`;\n// const IMG_PATH = \"https://image.tmdb.org/t/p/w300\";\n\n// const list = document.querySelector('.js-list');\n// let page = 1;\n// let options = {\n//     root: null,\n//     rootMargin: \"400px\",\n//     threshold: 0,\n// };\n\n// let observer = new IntersectionObserver(handlerPagination, options);\n\n// function handlerPagination(entries, observer) {\n//     // console.log(entries);\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             page += 1;\n//             serviceMovie(page)\n//                 .then(data => {\n//                     list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//                     if (data.total_pages <= data.page) {\n//                         observer.unobserve(guard);\n//                     }\n//                 })\n//         }\n//     })\n// }\n\n//  function getTrending(page = 1) {\n\n//     return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.statusText);\n//             }\n\n//             return resp.json()\n\n//         })\n// }\n// getTrending()\n//     .then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n//     })\n//     .catch(err => console.log(err))\n\n// function createMarkup(arr) {\n//     return arr.slice(0, 3).map(({ original_title, poster_path, release_date,  id, genre_ids}) =>\n//     `<li class='cards-list-item' id=\"${id}\">\n//        <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\"  loading=\"lazy\"\n//        width=\"395px\"\n//        height=\"354px\">\n//        <div class='weekly-trends__overlay'></div>\n//        <div class='cards__bloc-stars'>\n//      <h2 class='cards__list-title'>${original_title}</h2>\n//      <div class='cards__list-text'>${genre_ids} | ${release_date.slice(0, 4)}</div>\n// </div></li>`).join('')\n// }\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst ENDPOINT = '/trending/movie/week';\nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7';\n// const IMG_W400 = /w400;\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w400';\n\nconst list = document.querySelector('.js-list');\nlet page = 1;\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 0,\n};\n\nlet observer = new IntersectionObserver(handlerPagination, options);\n\nfunction handlerPagination(entries, observer) {\n  // console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n      serviceMovie(page).then(data => {\n        list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n        if (data.total_pages <= data.page) {\n          observer.unobserve(guard);\n        }\n      });\n    }\n  });\n}\n\nasync function getTrending(page = 1) {\n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then(\n    resp => {\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n\n      return resp.json();\n    }\n  );\n}\n\nasync function fetchGenres(movie) {\n  const response = await fetch(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=' +\n      API_KEY\n  );\n\n  const data = await response.json();\n\n  let genresArray = [];\n  const genres = data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nfunction displayMovieInfo(movie) {\n  const movieRating = movie.vote_average;\n  displayMovieRating(movieRating);\n}\n\nfunction displayMovieRating(rating) {\n  const roundedRating = Math.round(rating);\n\n  const starsElement = document.querySelector('.stars');\n  const ratingValueElement = document.querySelector('.rating-value');\n\n  let stars = '';\n  for (let i = 0; i < 5; i++) {\n    if (i < roundedRating / 2) {\n      stars += '★';\n    } else {\n      stars += '☆';\n    }\n  }\n\n  starsElement.textContent = stars;\n  ratingValueElement.textContent = `Rating: ${rating.toFixed(1)}`;\n}\n\nasync function createMarkup(arr) {\n  const genresPromises = arr.map(({ genre_ids }) => fetchGenres({ genre_ids }));\n  const genresArrays = await Promise.all(genresPromises);\n\n  return arr\n    .slice(0, 3)\n    .map(({ original_title, poster_path, release_date }, index) => {\n      const movieGenres = genresArrays[index];\n      return `<li class='cards-list-item'> \n          <img class='cards__list-img' src=\"${IMG_PATH}${poster_path}\" alt=\"${original_title}\"> \n          <div class='weekly-trends__overlay'></div> \n          <div class='cards__bloc-stars'> \n            <h2 class='cards__list-title'>${original_title}</h2> \n            <div class='cards__list-text'>${movieGenres.join(\n              ', '\n            )} | ${release_date.slice(0, 4)}</div>  \n              \n          </div> \n        </li>`;\n    })\n    .join('');\n}\n\ngetTrending()\n  .then(async data => {\n    list.insertAdjacentHTML('beforeend', await createMarkup(data.results));\n  })\n  .catch(err => console.log(err));\n\nfunction createMarkup(arr) {\n  return arr\n    .slice(0, 3)\n    .map(\n      ({\n        original_title,\n        poster_path,\n        release_date,\n        genre,\n      }) => `<li class='cards-list-item'>\n       <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w400${poster_path}\" alt=\"${original_title}\">\n       <div class='weekly-trends__overlay'></div>\n       <div class='cards__bloc-stars'>\n     <h2 class='cards__list-title'>${original_title}</h2>\n     <div class='cards__list-text'>${genre} | ${release_date.slice(0, 4)}</div> \n</div></li>`\n    )\n    .join('');\n}\n","import axios from 'axios';\nimport { KEY } from './API/api-key';\n\nconst sectionTitle = document.querySelector('.upcoming-section-title');\nconst container = document.querySelector('.container-upcoming-the-month');\nconst addBtn = document.querySelector('.library-button');\nlet movieData;\n\nasync function fetchUpcomingMovies() {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/movie/upcoming?language=en-US',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  const data = response.data;\n  const randomNumber = Math.floor(Math.random() * data.results.length);\n  const movie = data.results[randomNumber];\n\n  return movie;\n}\n\nfetchUpcomingMovies()\n  .then(movie => {\n    movieData = movie;\n    console.log(movie);\n    createMarkup(movie);\n  })\n  .catch(() => {\n    if (!movieData) {\n      return notFoundMarkup();\n    }\n    errorMarkup();\n  });\n\nasync function fetchGenres(movie) {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n\n  let genresArray = [];\n  const genres = response.data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nasync function createMarkup(movie) {\n  const genresResponse = await fetchGenres(movie).then(response => {\n    return response;\n  });\n  const genresList = genresResponse\n    .map((genre, index) => {\n      if (index === 0) {\n        return genre.charAt(0).toUpperCase() + genre.slice(1);\n      } else {\n        return genre.toLowerCase();\n      }\n    })\n    .join(', ');\n\n  const dateParts = movie.release_date.split('-');\n  const dateFormat = `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;\n  const posterUrl = getImageUrl(movie);\n\n  const markup = `<div class=\"upcoming-desktop-container\"><img\n  class=\"upcoming-section-img\"\n  src=\"${posterUrl}\"\n  alt=\"${movie.title}\"\n/>\n<div class=\"upcoming-desktop-flex\">\n  <h3 class=\"upcoming-movie-title\">${movie.title}</h3>\n  <div class=\"upcoming-flex-container\">\n    <div class=\"upcoming-tablet-flex\">\n      <div class=\"upcoming-data-flex\">\n        <p class=\"info-key\">Release date</p>\n        <p class=\"info-value info-value-date\">${dateFormat}</p>\n      </div>\n      <div class=\"upcoming-data-flex\">\n        <p class=\"info-key\">Vote / Votes</p>\n        <p class=\"info-value\">\n          <span class=\"info-value-vote\"> ${movie.vote_average}</span> /\n          <span class=\"info-value-vote\">${movie.vote_count}</span>\n        </p>\n      </div>\n    </div>\n    <div class=\"upcoming-tablet-flex\">\n      <div class=\"upcoming-data-flex\">\n        <p class=\"info-key\">Popularity</p>\n        <p class=\"info-value\">${movie.popularity.toFixed(1)}</p>\n      </div>\n      <div class=\"upcoming-data-flex\">\n        <p class=\"info-key\">Genre</p>\n        <p class=\"info-value\">${genresList}</p>\n      </div>\n    </div>\n  </div>\n\n  <h4 class=\"about-title\">About</h4>\n  <p class=\"about-description\">${movie.overview}</p>\n  <button class=\"library-button\">Add to my library</button>\n</div></div>\n        `;\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n  addBtn = document.querySelector('.library-button');\n  addBtn.addEventListener('click', onBtnClick);\n}\n\nfunction getImageUrl(movie) {\n  const baseImageUrl = 'https://image.tmdb.org/t/p/';\n  const deviceWidth = window.innerWidth;\n\n  if (deviceWidth >= 768) {\n    return `${baseImageUrl}w1280/${movie.backdrop_path}`;\n  } else {\n    return `${baseImageUrl}w500/${movie.poster_path}`;\n  }\n}\n\nfunction notFoundMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>There are no upcoming movies at the moment.</p></div> ';\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n}\n\nfunction errorMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>Something went wrong.</p></div>';\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n}\n\nfunction onBtnClick() {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  const movieId = movieData.id;\n\n  if (isMovieStored(movieId)) {\n    const index = storedMovies.findIndex(movie => movie.id === movieId);\n    storedMovies.splice(index, 1);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Add to my library';\n  } else {\n    storedMovies.push(movieData);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Remove from my library';\n  }\n}\n\nfunction isMovieStored(movieId) {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  return storedMovies.some(movie => movie.id === movieId);\n}\n"],"names":["parcelRequire","$bpxeT","$21ec04dc48ab3d3d$var$BASE_URL","$21ec04dc48ab3d3d$var$ENDPOINT","$21ec04dc48ab3d3d$var$API_KEY","$21ec04dc48ab3d3d$var$IMG_PATH","$21ec04dc48ab3d3d$var$list","document","querySelector","$21ec04dc48ab3d3d$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$21ec04dc48ab3d3d$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","$21ec04dc48ab3d3d$var$_getTrending","$parcel$interopDefault","$2TvXO","mark","_callee","page1","_args","arguments","length","fetch","concat","resp","ok","Error","statusText","json","apply","this","$21ec04dc48ab3d3d$var$fetchGenres","movie","$21ec04dc48ab3d3d$var$_fetchGenres","response","genresArray","genres","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","genre","_ctx","sent","undefined","Symbol","iterator","next","done","value","genre_ids","includes","id","push","name","t0","return","arr","$21ec04dc48ab3d3d$var$_createMarkup","genresPromises","genresArrays","map","param","Promise","all","slice","index","original_title","poster_path","release_date","movieGenres","join","$21ec04dc48ab3d3d$var$getTrending","call","t1","catch","err","console","log","$ae7e4fc690ed52aa$var$movieData","$ae7e4fc690ed52aa$var$sectionTitle","$ae7e4fc690ed52aa$var$addBtn","$ae7e4fc690ed52aa$var$_fetchUpcomingMovies","randomNumber","$dIxxU","default","get","params","api_key","$1xRtb","KEY","Math","floor","random","$ae7e4fc690ed52aa$var$fetchGenres","$ae7e4fc690ed52aa$var$_fetchGenres","$ae7e4fc690ed52aa$var$_createMarkup","genresResponse","genresList","dateParts","dateFormat","posterUrl","markup","charAt","toUpperCase","toLowerCase","split","$ae7e4fc690ed52aa$var$getImageUrl","title","vote_average","vote_count","popularity","toFixed","overview","addEventListener","$ae7e4fc690ed52aa$var$onBtnClick","baseImageUrl","window","innerWidth","backdrop_path","storedMovies","JSON","parse","localStorage","getItem","movieId","some","$ae7e4fc690ed52aa$var$isMovieStored","findIndex","splice","setItem","stringify","textContent","$ae7e4fc690ed52aa$var$fetchUpcomingMovies","$ae7e4fc690ed52aa$var$createMarkup","$ae7e4fc690ed52aa$var$errorMarkup"],"version":3,"file":"index.aa6f84e8.js.map"}